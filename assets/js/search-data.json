{
  
    
        "post0": {
            "title": "Homework/Hacks for Sections 17-18",
            "content": "HACK 1 . HACK 2 . HACK 3 . HACK 4 . HACK 5 . HACK 6 . HACK 7 . HACK 8: Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . HACK 9: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . HACK 10: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) .",
            "url": "https://vardaansinha.github.io/fastpagesp4/jupyter/2022/12/12/HACKS.html",
            "relUrl": "/jupyter/2022/12/12/HACKS.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "3.18 Undecidable Problems",
            "content": "Learning Objective: . Explain the existence of undecidable problems in programming. What are undecidable programs in computer science? . Main Idea: There exist problems that computers cannot solve, and even when a computer can solve a problem, it may not be able to do so in a reasonable amount of time. . Essential Knowledge . What is a decidable problem? . These are problems for which algorithms can be written to solve/produce a correct output for all possible inputs. . num = 4 if num % 2 == 0: # divides num by 2 and checks remainder. print(&quot;is even&quot;) # if remainder is 0, num is even else: print(&quot;is not even&quot;) # if there is any remainder e.g its odd num: num is odd # all inputs will provide a yes or no answer . is even . What is an undecidable problem? . These are problems for which no algorithms can be built that can provide a correct yes or no answer. . Undecidable problems may have some instances of algorithmic solutions, but there are no algorithmic solutions that can solve all instances of the problem (Zeen) . IMPORTANT!!!! . Don&#39;t worry about determining if a given problem is undecidable or not. deciding if problems are undecideable or not is outside the scope of APCSP. Worry about that later in advanced CS courses . Undecidable Problem: Example . # given a computer program and an input... # will the program terminate or will it run forever? x = input() while x: pass # this reads the input, # and if it&#39;s not empty, the procedure loops forever. . The Halting problem is probably the best known problem that has proven to be undecidable. that is, no program can solve the Halting problem for sufficiently general computer programs. . def fumo(): a = 0 i = 1 while a != 1: i = i + 1 print(i) fumo() # this is a good example of the halting problem . Theoretical Example (Zeen): . Barber Paradox: There was a barber in a small town on Crick Island, and one day he made a rule that he would only cut the hair of people who did not cut their own hair. The barber&#39;s rule seemed to make sense, since people cut their own hair, so I do not have to &quot;do more than that&quot;, I will give this person a haircut. Initially, there was nothing wrong with this rule, but later, as the barber&#39;s own hair grew longer and longer, he found himself in a dilemma: should he give himself a haircut? . Answer: If he cuts his own hair, then he becomes the &quot;person who cuts his own hair&quot; in his regulations, then he should not cut his own hair; if he does not cut his own hair, then he is not the one in his regulations A person who cuts his own hair&quot;, then he should cut his own hair. Combining the above two situations, &quot;he cuts his own hair&quot; if and only if &quot;he does not cut his own hair&quot;, which becomes a paradox. . essential vocabulary . vocab term definition . undecidable problem | problems for which no algorithms can be built that can provide a correct yes or no answer or a solution | . Decidable problem | problems for which algorthms could be written to solve/produce a correct output for all inputs. | . practice problems . questions: . Question 1: can there be some algorithmic solutions for some inputs/instances of a undecidable problem? . Question 1.5: Are there algorithmic solutions for all inputs/instances of an undecidable problem? . Question 2: Is the following problem undecidable or decidable? . Problem: is the number given by user input greater than 20? . Question 3: the following algorithm solves the problem below. is the problem decidable or undecidable? . Problem: are there more different kinds of fruits in stock or more different kinds of vegetables in stock? . fruits = [&quot;apples&quot;, &quot;pears&quot;, &quot;apricot&quot;, &quot;tomatos&quot;] vegetables = [&quot;carrot&quot;, &quot;cauliflower&quot;, &quot;beets&quot;] if len(fruits) &gt; len(vegetables): print(&quot;yes&quot;) else: print(&quot;no&quot;) . yes . Question 4: God is omnipotent, so can God create a stone that he cannot lift? Why or why not? (zeem) . ANSWERS: true, false, decidable, decidable .",
            "url": "https://vardaansinha.github.io/fastpagesp4/jupyter/2022/12/11/3.18.html",
            "relUrl": "/jupyter/2022/12/11/3.18.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "3.17 Algorithmic Efficiency: Part 2",
            "content": "Learning objective . AAP-4.A.5 . An algorithm’s efficiency can be informally measured by determining the number of times a statement or group of statements executes. . AAP-4.A.6 . Different correct algorithms for the same problem can have different efficiencies. . AAP-4.A.7 . Algorithms with a polynomial efficiency or slower (constant, linear, square, cube, etc.) are said to run in a reasonable amount of time. Algorithms with exponential or factorial efficiencies are examples of algorithms that run in an unreasonable amount of time. . AAP-4.A.8 . Some problems cannot be solved in a reasonable amount of time because there is no efficient algorithm for solving them. In these cases, approximate solutions are sought. . . To review, an algorithm is a process or set of rules to be followed in calculations or other problem-solving operations. . Algorithms can be divided up into four types: . 1 step | 2 step | 3 step | 4 step | . The first step consists of an integer being multiplied by a variable &#39;n&#39;. An example of this could be 5 * n. . Practice Problem 1: . Q: Which of the following algorithms is a step 1 algorithm? . A. 3^4 B. (2 x 4)^2 C. 2 x 4 D. 6^4 . Answer [The answer would be option C. Here, the integer is 2, and it is being multiplied by a value &#39;n&#39;, which is 4.] . A two-step algorithm consists of an integer to the power of the variable &#39;n&#39;. . Practice Problem 2: . Q: Which of the following algorithms is a two-step algorithm? . A. 3^4 B. (2 x 4)^2 C. 2 x 4 D. 6 + 4 . Answer [The answer would be option A. Here, the integer is 3, and it is being raised to the power of 4.] . A three-step algorithm is an algorithm where there is a variable multiplied by an integer, all to the power of 2. . An example of this would be (2 * n)^2. . . Finally, a four-step algorithm is a variable factorial. For instance, 5! = 5 4 3 2 1 = 120. . . 1 step: Linear 2 steps: Exponential 3 steps: Square 4 steps: Factorial . . When an algorithm is linear or square, it runs in a reasonable amount of time. However, if the algorithm is exponential or factorial, they are considered to be run in an unreasonable amount of time. A &quot;reasonable amount of time&quot; is when the algorithm increases by smaller values instead of jumping from a lower value to a much higher value. . Categorizing run times . We can categorize the run time of an algorithm according to how the number of steps increases as the input size increases. Does it always take the same amount of time? That&#39;s a constant increase, a very fast run time. Does it always require looking at every possible permutation of the input? That&#39;s an exponential increase, a very slow run time. Most run times are somewhere between. . Constant time . When an algorithm runs in constant time, it means that it always takes a fixed number of steps, no matter how large the input size increases. . As an example, consider accessing the first element of a list: . firstPost ← posts[1] . Even if the list grows to be a million items long, that operation will always require a single step. . Now imagine this code&#39;s result as a table? A graph? What would it look like? (In terms of List size vs Steps) . Answer . Linear time . When an algorithm grows in linear time, its number of steps increases in direct proportion to the input size. . The aptly-named linear search algorithm runs in linear time. The pseudocode shows its simplicity compared to binary search: . PROCEDURE searchList(numbers, targetNumber) { index ← 1 REPEAT UNTIL (index &gt; LENGTH(numbers)) { IF (numbers[index] = targetNumber) { RETURN index } index ← index + 1 } RETURN -1 } . This time, the loop looks at every item in the list. This exhaustive search is necessary to search for items in an unsorted list, since there&#39;s no way to narrow down where a particular item might be. This algorithm will always require at least as many steps as items in the list. . Now imagine this code&#39;s result as a table? A graph? What would it look like? (In terms of List size vs Steps) . Answer . Quadratic time . When an algorithm grows in quadratic time, its steps increase in proportion to the input size squared. . Several list sorting algorithms run in quadratic time, like selection sort. That algorithm starts from the front of the list, then keeps finding the next smallest value in the list and swapping it with the current value. . Here&#39;s pseudocode for selection sort: . i ← 1 REPEAT UNTIL (i &gt; LENGTH(numbers)) { minIndex ← i j ← i + 1 // Find next smallest value REPEAT UNTIL (j &gt; LENGTH(numbers)) { IF (numbers[j] &lt; numbers[minIndex]) { minIndex ← j } } // Swap if new minimum found IF (minIndex != i) { tempNum ← numbers[minIndex] numbers[i] ← tempNum numbers[minIndex] &lt;- tempNum } } . The important thing to notice about the algorithm is the nested loop: it loops through each items in the list, and loops again through the remaining items for each of those items. . Now imagine this code&#39;s result as a table? A graph? What would it look like? (In terms of List size vs Steps) . Answer . Exponential time . When an algorithm grows in superpolynomial time, its number of steps increases faster than a polynomial function of the input size. . An algorithm often requires superpolynomial time when it must look at every permutation of values. For example, consider an algorithm that generates all possible numerical passwords for a given password length. . For a password length of 2, it generates 100 passwords: . 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 . That algorithm requires at least 10^2 steps, since there are 10 possibilities for each digit (0-9) and it must try out every possibility for each of the 2 digits. . For any given password length of n, the algorithm requires 10^n steps. . That run time increases incredibly quickly, since each additional digit requires 10 times the number of steps. . Now imagine this code&#39;s result as a table? A graph? What would it look like? (In terms of List size vs Steps) . Answer . All Together Now . Now that we&#39;ve seen examples of possible run times for algorithms, let&#39;s compare them on a graph: . That graph makes it even more clear that there&#39;s a definite difference in these run times, especially as input size increases. Since modern computer programs increasingly deal with large data sets (like from millions of users or sensors), the run time efficiency matters quite a bit. . Polynomial vs. superpolynomial . Polynomial time describes any run time that does not increase faster than n^k which includes Constant time, Quadratic time, and other higher degree polynomials. . Superpolynomial time describes any run time that does increase faster than n^k which includes Exponential time and factorial time . Why do we make the split between polynomial and superpolynomial? . This table of run times illustrates why: . A superpolynomial run time often requires more time than available in the universe, even for relatively small input sizes. . This is why we think of polynomial run times as reasonable and superpolynomial times as unreasonable. A polynomial run time isn&#39;t always ideal (and we often try to improve those times), but it is at least feasible. . Reasonable Time . Algorithms with a polynomial efficiency or lower (constant, linear, square, cube, etc.) . Ex: . n^2 | 2n | n | n^10 | n^20 | log(n) | . Unreasonable Time . Algorithms with exponential or factorial efficiencies . Ex: . 2^n | 10^n | 5^n | .",
            "url": "https://vardaansinha.github.io/fastpagesp4/jupyter/2022/12/11/3.17part2.html",
            "relUrl": "/jupyter/2022/12/11/3.17part2.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "3.17 Algorithmic Efficiency: Part 1",
            "content": "Learning Objectives (3.17) . For determining the efficiency of an algorithm: . Explain the difference between algorithms that run in reasonable time and those that do not. | . Essential Knowledge (3.17 Part 1) &amp; Vocabulary . A problem is a description of a task that may or may not be able to be solved through the use of an algorithm. An instance of a problem includes a specific input. One example of this type of problem is a sorting problem. | A decision problem is a problem with a binary answer (yes or no). An optimization problem is a problem with the objective of finding the BEST solution amongst many possibilities to solve a problem. | An algorithm&#39;s efficiency is determine through formal or mathematical reasoning. | . Learning Example #1 (Follow Along): . One example of a sorting problem as referenced in the above key ideas involves a collection of 4 cards. The objective of this problem is to order the cards from least to greatest value, and there are many different algorithms to do this. . Algorithm #1 . In algorithm #1, the program repeatedly compares two elements in an array of values that are right next to each other, and then swaps them if they are in the wrong order. . In this case, the numbers were 4, 5, 7, and 2 (in that order). The code would look a little like this (notice the bubble sort that was covered by another group!): . def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] &gt; arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] arr = [4, 5, 7, 2] bubbleSort(arr) print(&quot;Here is your sorted array:&quot;) for i in range(len(arr)): print(&quot;%d&quot; % arr[i]) . Here is your sorted array: 2 4 5 7 . Now, the above code worked. According to calculations though, this algorithm would take 7 comparisons (comparisons are where the two cards next to each other are compared), and 3 swaps (swaps are seen in lines 6 and 7 of the above program, where if a descending card has a greater value than the next card, the two cards are swapped). . So, in accordance to the main points of this unit, we have to establish a sense of algorithmic efficiency, and create an algorithm that takes less steps and still accomplishes the task. . Algorithm #2: . In this algorithm, the program keeps finding the minimum element in the defined array, and it keeps sorting it in order. For each iteration of the program, the minimum element is compared with the next card, and then swapped if necessary. . Now, let&#39;s see how this program works: . def selectionSort(array,value): for step in range(value): min_element = step for i in range(step + 1, value): if array[i] &lt; array[min_element]: min_element = i (array[step], array[min_element]) = (array[min_element], array[step]) cards = [4, 5, 7, 2] value = len(cards) selectionSort(cards,value) print(&quot;Here is your sorted array:&quot;) print(cards) . Here is your sorted array: [2, 4, 5, 7] . This code ALSO worked. But, in comparison to the first algorithm, this algorithm took less comparisons and less swaps. . In the next part of our lesson, we&#39;ll be talking about HOW we can quantify algorithmic efficiency in a variety of manners. . Check for Understanding: . As discussed in the essential knowledge, there are problems that can or cannot be solved algorithmically. Which of the following options provides a problem that cannot be solved with a computer algorithm? | A. You are in an elevator with other people and you have to find a route for different floors requested by people in the elevator. . B. Sorting decks of cash amounts. Each deck has a different cash amount, and the decks need to be ordered from greatest to least. . C. Finding the best possible route to get from one corner of a computer maze to the other corner while avoiding defined obstacles. . D. All of the following can be solved with algorithms. . Answer [The answer would be option A. Though you might be able to find the best route for a set number of people to get to their floor, but at each floor that the elevator stops, new people may get on, people may get off on accident, etc, so there is a limit to how much you can optimize the problem with an algorithm.]",
            "url": "https://vardaansinha.github.io/fastpagesp4/jupyter/2022/12/11/3.17part1.html",
            "relUrl": "/jupyter/2022/12/11/3.17part1.html",
            "date": " • Dec 11, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vardaansinha.github.io/fastpagesp4/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vardaansinha.github.io/fastpagesp4/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}